
Stack-Based Arithmetic and Logic Unit (8-bit)
=============================================

The stack-based ALU is a more powerfull form of an Arithmetic and Logic Unit (ALU) that can also be used as a register or an instruction sequencer.

For more detailed explanation of how and why, read up on "Stack Machines".
* https://en.wikipedia.org/wiki/Stack_machine
* https://users.ece.cmu.edu/~koopman/stack_computers/chap6.html

Note: The Stack ALU does not make a full microprocessor.  You will need other parts, such as memory, a clock, a data bus, etc.

Inputs and Outputs
===================

Ribbon Inputs:
	data-in low bits
	data-in high bits
	operation
	clock (edge triggered, if not connected, uses the game clock)

Ribbon Ouputs:
	data-out low bits
	data-out high bits
	status flags

Operations Summary
===================

Operations are split into 4 categories: 
	00 - data / stack
	01 - special
	10 - arithmetic
	11 - bitwise logic
Each category has 4 operations.

The only operation that reads from data-in is:
	0011 - push

The rest get their inputs from popping the stack.

The only operation that writes to data-out is:
	0001 - peek

Data-out is otherwise "silent" so that other circuitry can use those ribbons to communicate when the output is not explicitly requested (shared data bus).

Arithmetic and bitwise logic operations are performed by the following sequence:
1. pop number for right-hand side of operation ("top")
2. pop number for left-hand side of operation ("next")
3. perform operation
4. push result of operation onto stack
Note:
	Multiply and divide push TWO values onto the stack.
	Only the last value pushed onto the stack is sent to data out (during peek instruction).
	To get the other value, pop the stack.
5. set status flags

For example, if the stack looks like this:

	top
	next

And the operation is divide, then after the operation, the stack will look like this:

	next % top
	next / top

If you just want the quotient on the top of the stack, you'd then execute: pop
If you just want the remainder on the top of the stack, you'd then execute: swap, pop to get rid of the quotient.

There are four status flags, all available on the status flags output ribbon:
	0001 - zero
	0010 - sign (1 if negative, 0 if positive)
	0100 - carry / borrow / overflow
	1000 - stack fault

The stack can only hold up to 256 values.  (I had to set a limit, and that seemed reasonable.)
Pushing the stack when its full or poping it when it's empty will set the stack fault flag. (And the push or pop will fail.)


Operation List (OpCodes)
===================
00 - data / stack
	0000 - 0 - standby - (do nothing)
	0001 - 1 - peek - (send top of stack to data out)
	0010 - 2 - pop - (drop) discard top of stack
	0011 - 3 - push - (push data in to top of stack)
01 - special
	0100 - 4 - increment - increment top of stack
	0101 - 5 - swap - swap top and next (might change)
	0110 - 6 - copyfrom - copy from stack index (if 0, returns the current size of the stack) 
	0111 - 7 - reserved - undecided (write to stack?)
	swap top and next? ("swap") copy top? (""dup")  read from stack depth (top specifies index, data is copied to top)?  same thing but write next?
10 - arithmetic
	1000 - 8 - add - pop and add
	1001 - 9 - subtract - pop and subtract
	1010 - A - multiply - pop and multiply (pushes high bits on stack first, then low bits)
	1011 - B - divide - pop and divide/mod (pushes result on stack first, then remainder (modulus))
11 - bitwise logic
	1100 - C - or - pop and or
	1101 - D - and - pop and and
	1110 - E - xor - pop and xor
	1111 - F - xnor - pop and xnor - spare instruction?

Other Operations
===================
How to do other operations with multiple steps:
	to negate (take additive inverse): push 0, swap, subtract
	to not (bitwise inverse): push 0, xnor.
	duplicate stack top: push 1, copyfrom